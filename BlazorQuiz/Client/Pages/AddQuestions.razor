@page "/addquestion/{publicid}"
@inject HttpClient Http
@inject IConfiguration config

@using Microsoft.AspNetCore
@using BlazorQuiz.Shared
@using static System.Net.WebRequestMethods;

<div class="quiz-container">

    <h3>Add questions to your quiz</h3>

    <AuthorizeView>
        <Authorized>

            <!--Add question-->

            <form name="questionform">
                <div class="form-group">
                <label for="addquestion">Question</label><br />
                <input type="text" id="question" class="form-control" @bind="addedQuestion" /><br />
                <label for="addquestion" id="question">Answer</label><br />
                <input type="text" id="answer" @bind=addedAnswer />
                </div>
                <br />

                <!-- Multiple Question alternative-->

                <label for="multi">Multi</label>
                <input type="checkbox" id="multi" value="Flervalsfråga" @bind="multipleAnswer" />

                @if (multipleAnswer == true) {

                    <label for="addquestion">Fake answer 1</label>
                    <input type="text" id="question" @bind="fakeAnswers[0]" />

                    <br />
                    <label for="addquestion">Fake answer 2</label>
                    <input type="text" id="question" @bind="fakeAnswers[1]" />

                    <br />
                    <label for="addquestion">Fake answer 3</label>
                    <input type="text" id="question" @bind="fakeAnswers[2]" />

                    <br />

                }
                

                <!-- Timed Quesitons-->

                <input type="radio" id="notimer" name="timerchoice" value="0" />
                <label @onclick="() => ShowComponent = false" name="No timer">No timer</label>
                <input type="radio" id="timer" name="timerchoice" value="2" />
                <label @onclick="() => ShowComponent = true">Timer</label>
            </form>
            @if (ShowComponent)
            {
                <MudRadioGroup Class="mt-2" @bind-SelectedOption=timeLimit>
                    <MudRadio Option="10" Color="Color.Primary">10 seconds</MudRadio>
                    <MudRadio Option="25" Color="Color.Primary">25 seconds</MudRadio>
                    <MudRadio Option="50" Color="Color.Primary">50 seconds</MudRadio>
                </MudRadioGroup>

            }
            <br />

            <!-- Upload Files or Add URL -->
            <label for="addedURL">Add URL for a picture</label>
            <input type="text" id="question" @bind="addedURL" />
            @* <InputFile OnChange="@UploadFile" /> *@
            <br />
            <input type="button" value="Add Question" class="btn btn-primary" @onclick=AddQuestion>Add question</input>

            <br />

        </Authorized>

        <NotAuthorized>
            <p>Du måste logga in för att skapa ett quiz.</p>
        </NotAuthorized>
    </AuthorizeView>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/">Finish the quiz!</MudButton>
</div>



@code {

    private long maxFileSize = 1024 * 1024 * 3; // 3MB
    private int maxAllowedFiles = 1;
    private List<string> errors = new();

    private IBrowserFile file;
    private string uploadMessage;

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    bool ShowComponent { get; set; }
    bool multipleAnswer = false;
    private string selectedRadio;

    [Parameter]
    public string PublicId { get; set; }

    private string addedQuestion = "";
    private string addedAnswer = "";
    private string addedURL = "";
    private string[] fakeAnswers = new string[3];
    private bool hasMultipleAnswers = false;

    private int timeLimit = 0;

    private QuestionViewModel questions = new QuestionViewModel();

    private async Task AddQuestion()
    {
        QuestionViewModel newQuestion = new QuestionViewModel()
            {
                Question = addedQuestion,
                Answer = addedAnswer,
                PublicId = PublicId,
                TimeLimit = timeLimit,
                FakeAnswers = fakeAnswers,
                HasMultipleAnswers = hasMultipleAnswers
                
            };
        var response = await Http.PostAsJsonAsync("api/question/", newQuestion);

        addedQuestion = "";
        addedAnswer = "";
        addedURL = "";

        for (int i = 0; i < fakeAnswers.Length; i++)
        {
            fakeAnswers[i] = "";
        }
        timeLimit = 0;

    }

    //Lägg i question, answer och publicid i Questioncontrollern
}
