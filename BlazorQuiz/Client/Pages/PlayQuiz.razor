@page "/playquiz/{PublicId:guid}"

@inject HttpClient Http

@using BlazorQuiz.Shared
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using Microsoft.AspNetCore.Components

<h3>Todo: Get quiz title of chosen quiz</h3>


<div class="quiz-container">

    @if (questions[questionIndex].TimeLimit > 0)
    {
        <p id="timelimit-font">You have @questions[questionIndex].TimeLimit seconds to answer the question.</p>
    }

    <h4>@questions[questionIndex].Question</h4>
    <li>
        <label>@questions[questionIndex].Answer</label>
        <input type="radio" name="userChoice">
    </li>
    @foreach (var fakeAnswer in questions[questionIndex].FakeAnswers)
    {
        <li>
            <label>@fakeAnswer</label>
            <input type="radio" name="userChoice" @onchange="@(() => selectedAnswer = fakeAnswer)">
        </li>
    }

    @if (questions[questionIndex].TimeLimit > 0)
    {
        <p>You have @questions[questionIndex].TimeLimit seconds to answer the question.</p>
    }
    @questionIndex
    <p>@score</p>
    <p id>questions count: @questions.Count()</p>
    <input type="button" value="Submit" @onclick="() => CheckAnswer(questions[questionIndex].Answer, selectedAnswer )">Submit answer</input>

    @*      <input type="button" value="Submit" @onclick=CheckAnswer(quizzes[questionIndex].Answer,  ) >Submit answer</input>
    *@
</div>

@code {
    private int starterTime = 0;

    private System.Timers.Timer timer;


    // timer.elapsed (visa hur lång tid har gått)
    // jämföra timer-klassen med int timelimit
    string? selectedAnswer;
    int score = 0;
    int questionIndex = 0;
    bool gameOver = false;

    // public List<Question> Questions { get; set; } = new List<Question>();

    // [Parameter]
    // public int questionindex { get; set; } = 0;

    [Parameter]
    public Guid? PublicId { get; set; }

    // private IEnumerable<QuizViewModel> quizzes = new List<QuizViewModel>();

    private List<QuestionViewModel> questions = new List<QuestionViewModel>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            questions = await Http.GetFromJsonAsync<List<QuestionViewModel>>($"api/quiz/chosenquiz/{PublicId}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task CheckAnswer(string guess, string answer)
    {
        // var response = await Http.PostAsJsonAsync("api/quiz", selectedAnswer);
        // var result = await response.Content.ReadAsStringAsync();

        if (guess == answer)
        {
            score++;
        }

        if (questionIndex >= questions.Count() - 1)
        {

            gameOver = true;
            await EndGame();
        }
        else
        {
            questionIndex++;
        }

    }

    private async Task EndGame()
    {

        EndgameViewModel endgameModel = new EndgameViewModel()
            {

                PublicId = PublicId,
                Score = score
            };
        await Http.PostAsJsonAsync("api/game/endgame", endgameModel /* new { PublicId = PublicId , score = score } */);
    }
}
