@page "/playquiz/{PublicId:guid}"

@inject HttpClient Http

@using BlazorQuiz.Shared
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using Microsoft.AspNetCore.Components


@if (isLoading)
{
    <p>Loading... </p>
}
@if (questions.Count() == 0)
{
    <p>message</p>
    <p>quiz contains no questions.</p>
}
    @if (gameOver == false)
    {

        <h3>Play quiz!</h3>
        <div class="mediaquiz">

            
            @if (questions[questionIndex].IncludingVideo == true)
            {
                <iframe width="640" height="480" src="@questions[questionIndex].MediaURL"></iframe>
            }
            @if (questions[questionIndex].IncludingImage == true)
            {
                Console.WriteLine(@questions[questionIndex].MediaURL);
                
                <img src="@questions[questionIndex].MediaURL" width="500" />
            }
        </div>
        

        <div class="quiz-container">
        <EditForm Model="@questions" OnSubmit="() => CheckAnswer(questions[questionIndex].Answer.ToLower().Trim(), selectedAnswer.ToLower().Trim() )">

            

            @if (questions[questionIndex].TimeLimit > 0)
            {
                <p id="timelimit-font">You have @questions[questionIndex].TimeLimit seconds to answer the question.</p>
            }

            <h4>@questions[questionIndex].Question</h4>

            @if (questions[questionIndex].HasMultipleAnswers == true)
            {
                    @foreach (var option in options)
                    {
                        <li>
                            <button class="btn btn-primary" disabled="@isDisabled" @onclick="@(() => Click(option))">@option</button>
                        </li>
                    }
            }
            else
            {
                    <label for="textinput">Type your answer</label>
                    <input id="textinput"  type="text" class="form-control" @onchange="@((e) => TextAnswer(e.Value.ToString()))" disabled="@isDisabled" />
            }

            <p>Your answer: @selectedAnswer</p>

            @if (isCorrectAnswer == true)
            {
                <p>Correct answer!</p>
            }

            @if (isWrongAnswer == true)
            {
                <p>Wrong answer!</p>
            }

            <p>Score: @score</p>
            <button type="submit">Submit answer </button>
        </EditForm>
        </div>
    }


else
{
    <div class="game-over">
        <h2>Game Over</h2>
        
        <p>Your score: @score</p>
    </div>
  
    }           

@code {

    DateTime startTime = DateTime.Now;
    string? selectedAnswer;
    int score = 0;
    int questionIndex = 0;
    bool gameOver = false;
    bool isDisabled = false;
    bool isCorrectAnswer = false;
    bool isWrongAnswer = false;
    string timeUpAlert = "";
    int timeLimit;
    bool noQuestionsQuiz = false;
    bool isLoading = true;
    bool timeUp = false;
    string message;

    [Parameter]
    public Guid? PublicId { get; set; }


    private List<QuestionViewModel> questions = new List<QuestionViewModel>();

    private List<string> options = new List<string>();


    // Method to handle multiple options answers
    private void Click(string answer)
    {
        Console.WriteLine("Option: " + answer);
        if (answer == questions[questionIndex].Answer)
        {
            isCorrectAnswer = true;
        }
        else
        {
            isWrongAnswer = true;
        }
        selectedAnswer = answer;
        isDisabled = true;
    }

    // Method to handle free text inputs
    private void TextAnswer(string guess)
    {
        if (guess.ToLower().Trim() == questions[questionIndex].Answer.ToLower().Trim())
        {
            Console.WriteLine("Text input: " + guess);
            Console.WriteLine("This is correct bool" + isCorrectAnswer);
            DateTime endTime = DateTime.Now;

            isCorrectAnswer = true;
        }
        else
        {
            Console.WriteLine("This is correct bool" + isWrongAnswer);

            isWrongAnswer = true;
        }
        selectedAnswer = "";
        isDisabled = true;
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            questions = await Http.GetFromJsonAsync<List<QuestionViewModel>>($"api/quiz/chosenquiz/{PublicId}");
            isLoading = false;

            if (questions == null || questions.Count == 0)
            {
                noQuestionsQuiz = true;
                message = "The quiz does not contain any questions...";
                return;
            }

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        if (questions != null && questions.Any() && questionIndex < questions.Count)
        {
            options.Clear();
            foreach (var fakeAnswer in questions[questionIndex].FakeAnswers)
            {
                options.Add(fakeAnswer);
            }
            options.Add(questions[questionIndex].Answer);
            Shuffle(options);

        }
    }

    // Random function to shuffle answers from the user
    private Random rng = new Random();
    public void Shuffle<T>(List<T> list)
    {
        int n = list.Count;
        while (n > 1)
        {
            n--;
            int k = rng.Next(n + 1);
            T value = list[k];
            list[k] = list[n];
            list[n] = value;
        }
    }

    private async Task CheckAnswer(string guess, string answer)
    {
        isDisabled = false;
        DateTime endTime = DateTime.Now;

        Console.WriteLine("Startime: " + startTime);
        Console.WriteLine("Endtime: " + endTime);
        Console.WriteLine("questionindex" + questionIndex);

        // var response = await Http.PostAsJsonAsync("api/quiz", selectedAnswer);
        // var result = await response.Content.ReadAsStringAsync();

        TimeSpan elapsedTime = endTime - startTime;
        int secondsElapsed = (int)elapsedTime.TotalSeconds;

        if (secondsElapsed > questions[questionIndex].TimeLimit && questions[questionIndex].TimeLimit > 0)
        {
            timeUp = true;
            Console.WriteLine("Time out");
            timeUpAlert = "Time is up! No score.";
        }
        else if (guess == answer)
        {
            Console.WriteLine("Score: " + score);
            score++;
        }

        if (questionIndex >= questions.Count() - 1)
        {
            gameOver = true;
            await EndGame();
        }
        else
        {
            isCorrectAnswer = false;
            isWrongAnswer = false;
            selectedAnswer = "";
            questionIndex++;
            if (questions != null)
            {
                options.Clear();
                foreach (var fakeAnswer in questions[questionIndex].FakeAnswers)
                {
                    options.Add(fakeAnswer);
                }
                options.Add(questions[questionIndex].Answer);
                Shuffle(options);

            }
        }
        startTime = DateTime.Now;
    }

    private async Task EndGame()
    {

        EndgameViewModel endgameModel = new EndgameViewModel()
            {
                PublicId = PublicId,
                Score = score
            };
        await Http.PostAsJsonAsync("api/game/endgame", endgameModel /* new { PublicId = PublicId , score = score } */);
    }
}
